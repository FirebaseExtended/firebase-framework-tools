// @generated by protoc-gen-es v2.9.0 with parameter "target=ts"
// @generated from file envoy/extensions/filters/http/ext_proc/v3/processing_mode.proto (package envoy.extensions.filters.http.ext_proc.v3, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv2";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv2";
import { file_udpa_annotations_status } from "../../../../../../udpa/annotations/status_pb.js";
import { file_validate_validate } from "../../../../../../validate/validate_pb.js";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file envoy/extensions/filters/http/ext_proc/v3/processing_mode.proto.
 */
export const file_envoy_extensions_filters_http_ext_proc_v3_processing_mode: GenFile = /*@__PURE__*/
  fileDesc("Cj9lbnZveS9leHRlbnNpb25zL2ZpbHRlcnMvaHR0cC9leHRfcHJvYy92My9wcm9jZXNzaW5nX21vZGUucHJvdG8SKWVudm95LmV4dGVuc2lvbnMuZmlsdGVycy5odHRwLmV4dF9wcm9jLnYzIswGCg5Qcm9jZXNzaW5nTW9kZRJvChNyZXF1ZXN0X2hlYWRlcl9tb2RlGAEgASgOMkguZW52b3kuZXh0ZW5zaW9ucy5maWx0ZXJzLmh0dHAuZXh0X3Byb2MudjMuUHJvY2Vzc2luZ01vZGUuSGVhZGVyU2VuZE1vZGVCCPpCBYIBAhABEnAKFHJlc3BvbnNlX2hlYWRlcl9tb2RlGAIgASgOMkguZW52b3kuZXh0ZW5zaW9ucy5maWx0ZXJzLmh0dHAuZXh0X3Byb2MudjMuUHJvY2Vzc2luZ01vZGUuSGVhZGVyU2VuZE1vZGVCCPpCBYIBAhABEmsKEXJlcXVlc3RfYm9keV9tb2RlGAMgASgOMkYuZW52b3kuZXh0ZW5zaW9ucy5maWx0ZXJzLmh0dHAuZXh0X3Byb2MudjMuUHJvY2Vzc2luZ01vZGUuQm9keVNlbmRNb2RlQgj6QgWCAQIQARJsChJyZXNwb25zZV9ib2R5X21vZGUYBCABKA4yRi5lbnZveS5leHRlbnNpb25zLmZpbHRlcnMuaHR0cC5leHRfcHJvYy52My5Qcm9jZXNzaW5nTW9kZS5Cb2R5U2VuZE1vZGVCCPpCBYIBAhABEnAKFHJlcXVlc3RfdHJhaWxlcl9tb2RlGAUgASgOMkguZW52b3kuZXh0ZW5zaW9ucy5maWx0ZXJzLmh0dHAuZXh0X3Byb2MudjMuUHJvY2Vzc2luZ01vZGUuSGVhZGVyU2VuZE1vZGVCCPpCBYIBAhABEnEKFXJlc3BvbnNlX3RyYWlsZXJfbW9kZRgGIAEoDjJILmVudm95LmV4dGVuc2lvbnMuZmlsdGVycy5odHRwLmV4dF9wcm9jLnYzLlByb2Nlc3NpbmdNb2RlLkhlYWRlclNlbmRNb2RlQgj6QgWCAQIQASIxCg5IZWFkZXJTZW5kTW9kZRILCgdERUZBVUxUEAASCAoEU0VORBABEggKBFNLSVAQAiJkCgxCb2R5U2VuZE1vZGUSCAoETk9ORRAAEgwKCFNUUkVBTUVEEAESDAoIQlVGRkVSRUQQAhIUChBCVUZGRVJFRF9QQVJUSUFMEAMSGAoURlVMTF9EVVBMRVhfU1RSRUFNRUQQBEK1AQo3aW8uZW52b3lwcm94eS5lbnZveS5leHRlbnNpb25zLmZpbHRlcnMuaHR0cC5leHRfcHJvYy52M0ITUHJvY2Vzc2luZ01vZGVQcm90b1ABWltnaXRodWIuY29tL2Vudm95cHJveHkvZ28tY29udHJvbC1wbGFuZS9lbnZveS9leHRlbnNpb25zL2ZpbHRlcnMvaHR0cC9leHRfcHJvYy92MztleHRfcHJvY3YzuoDI0QYCEAJiBnByb3RvMw", [file_udpa_annotations_status, file_validate_validate]);

/**
 * [#next-free-field: 7]
 *
 * @generated from message envoy.extensions.filters.http.ext_proc.v3.ProcessingMode
 */
export type ProcessingMode = Message<"envoy.extensions.filters.http.ext_proc.v3.ProcessingMode"> & {
  /**
   * How to handle the request header. Default is "SEND".
   * Note this field is ignored in :ref:`mode_override
   * <envoy_v3_api_field_service.ext_proc.v3.ProcessingResponse.mode_override>`, since mode
   * overrides can only affect messages exchanged after the request header is processed.
   *
   * @generated from field: envoy.extensions.filters.http.ext_proc.v3.ProcessingMode.HeaderSendMode request_header_mode = 1;
   */
  requestHeaderMode: ProcessingMode_HeaderSendMode;

  /**
   * How to handle the response header. Default is "SEND".
   *
   * @generated from field: envoy.extensions.filters.http.ext_proc.v3.ProcessingMode.HeaderSendMode response_header_mode = 2;
   */
  responseHeaderMode: ProcessingMode_HeaderSendMode;

  /**
   * How to handle the request body. Default is "NONE".
   *
   * @generated from field: envoy.extensions.filters.http.ext_proc.v3.ProcessingMode.BodySendMode request_body_mode = 3;
   */
  requestBodyMode: ProcessingMode_BodySendMode;

  /**
   * How do handle the response body. Default is "NONE".
   *
   * @generated from field: envoy.extensions.filters.http.ext_proc.v3.ProcessingMode.BodySendMode response_body_mode = 4;
   */
  responseBodyMode: ProcessingMode_BodySendMode;

  /**
   * How to handle the request trailers. Default is "SKIP".
   *
   * @generated from field: envoy.extensions.filters.http.ext_proc.v3.ProcessingMode.HeaderSendMode request_trailer_mode = 5;
   */
  requestTrailerMode: ProcessingMode_HeaderSendMode;

  /**
   * How to handle the response trailers. Default is "SKIP".
   *
   * @generated from field: envoy.extensions.filters.http.ext_proc.v3.ProcessingMode.HeaderSendMode response_trailer_mode = 6;
   */
  responseTrailerMode: ProcessingMode_HeaderSendMode;
};

/**
 * Describes the message envoy.extensions.filters.http.ext_proc.v3.ProcessingMode.
 * Use `create(ProcessingModeSchema)` to create a new message.
 */
export const ProcessingModeSchema: GenMessage<ProcessingMode> = /*@__PURE__*/
  messageDesc(file_envoy_extensions_filters_http_ext_proc_v3_processing_mode, 0);

/**
 * Control how headers and trailers are handled
 *
 * @generated from enum envoy.extensions.filters.http.ext_proc.v3.ProcessingMode.HeaderSendMode
 */
export enum ProcessingMode_HeaderSendMode {
  /**
   * When used to configure the ext_proc filter :ref:`processing_mode
   * <envoy_v3_api_field_extensions.filters.http.ext_proc.v3.ExternalProcessor.processing_mode>`,
   * the default HeaderSendMode depends on which part of the message is being processed. By
   * default, request and response headers are sent, while trailers are skipped.
   *
   * When used in :ref:`mode_override
   * <envoy_v3_api_field_service.ext_proc.v3.ProcessingResponse.mode_override>` or
   * :ref:`allowed_override_modes
   * <envoy_v3_api_field_extensions.filters.http.ext_proc.v3.ExternalProcessor.allowed_override_modes>`,
   * a value of DEFAULT indicates that there is no change from the behavior that is configured for
   * the filter in :ref:`processing_mode
   * <envoy_v3_api_field_extensions.filters.http.ext_proc.v3.ExternalProcessor.processing_mode>`.
   *
   * @generated from enum value: DEFAULT = 0;
   */
  DEFAULT = 0,

  /**
   * Send the header or trailer.
   *
   * @generated from enum value: SEND = 1;
   */
  SEND = 1,

  /**
   * Do not send the header or trailer.
   *
   * @generated from enum value: SKIP = 2;
   */
  SKIP = 2,
}

/**
 * Describes the enum envoy.extensions.filters.http.ext_proc.v3.ProcessingMode.HeaderSendMode.
 */
export const ProcessingMode_HeaderSendModeSchema: GenEnum<ProcessingMode_HeaderSendMode> = /*@__PURE__*/
  enumDesc(file_envoy_extensions_filters_http_ext_proc_v3_processing_mode, 0, 0);

/**
 * Control how the request and response bodies are handled
 * When body mutation by external processor is enabled, ext_proc filter will always remove
 * the content length header in four cases below because content length can not be guaranteed
 * to be set correctly:
 * 1) STREAMED BodySendMode: header processing completes before body mutation comes back.
 * 2) BUFFERED_PARTIAL BodySendMode: body is buffered and could be injected in different phases.
 * 3) BUFFERED BodySendMode + SKIP HeaderSendMode: header processing (e.g., update content-length) is skipped.
 * 4) FULL_DUPLEX_STREAMED BodySendMode: header processing completes before body mutation comes back.
 *
 * In Envoy's http1 codec implementation, removing content length will enable chunked transfer
 * encoding whenever feasible. The recipient (either client or server) must be able
 * to parse and decode the chunked transfer coding.
 * (see `details in RFC9112 <https://tools.ietf.org/html/rfc9112#section-7.1>`_).
 *
 * In BUFFERED BodySendMode + SEND HeaderSendMode, content length header is allowed but it is
 * external processor's responsibility to set the content length correctly matched to the length
 * of mutated body. If they don't match, the corresponding body mutation will be rejected and
 * local reply will be sent with an error message.
 *
 * @generated from enum envoy.extensions.filters.http.ext_proc.v3.ProcessingMode.BodySendMode
 */
export enum ProcessingMode_BodySendMode {
  /**
   * Do not send the body at all. This is the default.
   *
   * @generated from enum value: NONE = 0;
   */
  NONE = 0,

  /**
   * Stream the body to the server in pieces as they are seen.
   *
   * @generated from enum value: STREAMED = 1;
   */
  STREAMED = 1,

  /**
   * Buffer the message body in memory and send the entire body at once.
   * If the body exceeds the configured buffer limit, then the
   * downstream system will receive an error.
   *
   * @generated from enum value: BUFFERED = 2;
   */
  BUFFERED = 2,

  /**
   * Buffer the message body in memory and send the entire body in one
   * chunk. If the body exceeds the configured buffer limit, then the body contents
   * up to the buffer limit will be sent.
   *
   * @generated from enum value: BUFFERED_PARTIAL = 3;
   */
  BUFFERED_PARTIAL = 3,

  /**
   * @generated from enum value: FULL_DUPLEX_STREAMED = 4;
   */
  FULL_DUPLEX_STREAMED = 4,
}

/**
 * Describes the enum envoy.extensions.filters.http.ext_proc.v3.ProcessingMode.BodySendMode.
 */
export const ProcessingMode_BodySendModeSchema: GenEnum<ProcessingMode_BodySendMode> = /*@__PURE__*/
  enumDesc(file_envoy_extensions_filters_http_ext_proc_v3_processing_mode, 0, 1);

