// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.1
// source: envoy/extensions/filters/http/ext_proc/v3/processing_mode.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "envoy.extensions.filters.http.ext_proc.v3";

/** [#next-free-field: 7] */
export interface ProcessingMode {
  /**
   * How to handle the request header. Default is "SEND".
   * Note this field is ignored in :ref:`mode_override
   * <envoy_v3_api_field_service.ext_proc.v3.ProcessingResponse.mode_override>`, since mode
   * overrides can only affect messages exchanged after the request header is processed.
   */
  requestHeaderMode: ProcessingMode_HeaderSendMode;
  /** How to handle the response header. Default is "SEND". */
  responseHeaderMode: ProcessingMode_HeaderSendMode;
  /** How to handle the request body. Default is "NONE". */
  requestBodyMode: ProcessingMode_BodySendMode;
  /** How do handle the response body. Default is "NONE". */
  responseBodyMode: ProcessingMode_BodySendMode;
  /** How to handle the request trailers. Default is "SKIP". */
  requestTrailerMode: ProcessingMode_HeaderSendMode;
  /** How to handle the response trailers. Default is "SKIP". */
  responseTrailerMode: ProcessingMode_HeaderSendMode;
}

/** Control how headers and trailers are handled */
export enum ProcessingMode_HeaderSendMode {
  /**
   * DEFAULT - When used to configure the ext_proc filter :ref:`processing_mode
   * <envoy_v3_api_field_extensions.filters.http.ext_proc.v3.ExternalProcessor.processing_mode>`,
   * the default HeaderSendMode depends on which part of the message is being processed. By
   * default, request and response headers are sent, while trailers are skipped.
   *
   * When used in :ref:`mode_override
   * <envoy_v3_api_field_service.ext_proc.v3.ProcessingResponse.mode_override>` or
   * :ref:`allowed_override_modes
   * <envoy_v3_api_field_extensions.filters.http.ext_proc.v3.ExternalProcessor.allowed_override_modes>`,
   * a value of DEFAULT indicates that there is no change from the behavior that is configured for
   * the filter in :ref:`processing_mode
   * <envoy_v3_api_field_extensions.filters.http.ext_proc.v3.ExternalProcessor.processing_mode>`.
   */
  DEFAULT = 0,
  /** SEND - Send the header or trailer. */
  SEND = 1,
  /** SKIP - Do not send the header or trailer. */
  SKIP = 2,
  UNRECOGNIZED = -1,
}

export function processingMode_HeaderSendModeFromJSON(object: any): ProcessingMode_HeaderSendMode {
  switch (object) {
    case 0:
    case "DEFAULT":
      return ProcessingMode_HeaderSendMode.DEFAULT;
    case 1:
    case "SEND":
      return ProcessingMode_HeaderSendMode.SEND;
    case 2:
    case "SKIP":
      return ProcessingMode_HeaderSendMode.SKIP;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ProcessingMode_HeaderSendMode.UNRECOGNIZED;
  }
}

export function processingMode_HeaderSendModeToJSON(object: ProcessingMode_HeaderSendMode): string {
  switch (object) {
    case ProcessingMode_HeaderSendMode.DEFAULT:
      return "DEFAULT";
    case ProcessingMode_HeaderSendMode.SEND:
      return "SEND";
    case ProcessingMode_HeaderSendMode.SKIP:
      return "SKIP";
    case ProcessingMode_HeaderSendMode.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/**
 * Control how the request and response bodies are handled
 * When body mutation by external processor is enabled, ext_proc filter will always remove
 * the content length header in four cases below because content length can not be guaranteed
 * to be set correctly:
 * 1) STREAMED BodySendMode: header processing completes before body mutation comes back.
 * 2) BUFFERED_PARTIAL BodySendMode: body is buffered and could be injected in different phases.
 * 3) BUFFERED BodySendMode + SKIP HeaderSendMode: header processing (e.g., update content-length) is skipped.
 * 4) FULL_DUPLEX_STREAMED BodySendMode: header processing completes before body mutation comes back.
 *
 * In Envoy's http1 codec implementation, removing content length will enable chunked transfer
 * encoding whenever feasible. The recipient (either client or server) must be able
 * to parse and decode the chunked transfer coding.
 * (see `details in RFC9112 <https://tools.ietf.org/html/rfc9112#section-7.1>`_).
 *
 * In BUFFERED BodySendMode + SEND HeaderSendMode, content length header is allowed but it is
 * external processor's responsibility to set the content length correctly matched to the length
 * of mutated body. If they don't match, the corresponding body mutation will be rejected and
 * local reply will be sent with an error message.
 */
export enum ProcessingMode_BodySendMode {
  /** NONE - Do not send the body at all. This is the default. */
  NONE = 0,
  /** STREAMED - Stream the body to the server in pieces as they are seen. */
  STREAMED = 1,
  /**
   * BUFFERED - Buffer the message body in memory and send the entire body at once.
   * If the body exceeds the configured buffer limit, then the
   * downstream system will receive an error.
   */
  BUFFERED = 2,
  /**
   * BUFFERED_PARTIAL - Buffer the message body in memory and send the entire body in one
   * chunk. If the body exceeds the configured buffer limit, then the body contents
   * up to the buffer limit will be sent.
   */
  BUFFERED_PARTIAL = 3,
  FULL_DUPLEX_STREAMED = 4,
  UNRECOGNIZED = -1,
}

export function processingMode_BodySendModeFromJSON(object: any): ProcessingMode_BodySendMode {
  switch (object) {
    case 0:
    case "NONE":
      return ProcessingMode_BodySendMode.NONE;
    case 1:
    case "STREAMED":
      return ProcessingMode_BodySendMode.STREAMED;
    case 2:
    case "BUFFERED":
      return ProcessingMode_BodySendMode.BUFFERED;
    case 3:
    case "BUFFERED_PARTIAL":
      return ProcessingMode_BodySendMode.BUFFERED_PARTIAL;
    case 4:
    case "FULL_DUPLEX_STREAMED":
      return ProcessingMode_BodySendMode.FULL_DUPLEX_STREAMED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ProcessingMode_BodySendMode.UNRECOGNIZED;
  }
}

export function processingMode_BodySendModeToJSON(object: ProcessingMode_BodySendMode): string {
  switch (object) {
    case ProcessingMode_BodySendMode.NONE:
      return "NONE";
    case ProcessingMode_BodySendMode.STREAMED:
      return "STREAMED";
    case ProcessingMode_BodySendMode.BUFFERED:
      return "BUFFERED";
    case ProcessingMode_BodySendMode.BUFFERED_PARTIAL:
      return "BUFFERED_PARTIAL";
    case ProcessingMode_BodySendMode.FULL_DUPLEX_STREAMED:
      return "FULL_DUPLEX_STREAMED";
    case ProcessingMode_BodySendMode.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseProcessingMode(): ProcessingMode {
  return {
    requestHeaderMode: 0,
    responseHeaderMode: 0,
    requestBodyMode: 0,
    responseBodyMode: 0,
    requestTrailerMode: 0,
    responseTrailerMode: 0,
  };
}

export const ProcessingMode: MessageFns<ProcessingMode> = {
  encode(message: ProcessingMode, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.requestHeaderMode !== 0) {
      writer.uint32(8).int32(message.requestHeaderMode);
    }
    if (message.responseHeaderMode !== 0) {
      writer.uint32(16).int32(message.responseHeaderMode);
    }
    if (message.requestBodyMode !== 0) {
      writer.uint32(24).int32(message.requestBodyMode);
    }
    if (message.responseBodyMode !== 0) {
      writer.uint32(32).int32(message.responseBodyMode);
    }
    if (message.requestTrailerMode !== 0) {
      writer.uint32(40).int32(message.requestTrailerMode);
    }
    if (message.responseTrailerMode !== 0) {
      writer.uint32(48).int32(message.responseTrailerMode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProcessingMode {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProcessingMode();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.requestHeaderMode = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.responseHeaderMode = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.requestBodyMode = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.responseBodyMode = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.requestTrailerMode = reader.int32() as any;
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.responseTrailerMode = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProcessingMode {
    return {
      requestHeaderMode: isSet(object.requestHeaderMode)
        ? processingMode_HeaderSendModeFromJSON(object.requestHeaderMode)
        : 0,
      responseHeaderMode: isSet(object.responseHeaderMode)
        ? processingMode_HeaderSendModeFromJSON(object.responseHeaderMode)
        : 0,
      requestBodyMode: isSet(object.requestBodyMode) ? processingMode_BodySendModeFromJSON(object.requestBodyMode) : 0,
      responseBodyMode: isSet(object.responseBodyMode)
        ? processingMode_BodySendModeFromJSON(object.responseBodyMode)
        : 0,
      requestTrailerMode: isSet(object.requestTrailerMode)
        ? processingMode_HeaderSendModeFromJSON(object.requestTrailerMode)
        : 0,
      responseTrailerMode: isSet(object.responseTrailerMode)
        ? processingMode_HeaderSendModeFromJSON(object.responseTrailerMode)
        : 0,
    };
  },

  toJSON(message: ProcessingMode): unknown {
    const obj: any = {};
    if (message.requestHeaderMode !== 0) {
      obj.requestHeaderMode = processingMode_HeaderSendModeToJSON(message.requestHeaderMode);
    }
    if (message.responseHeaderMode !== 0) {
      obj.responseHeaderMode = processingMode_HeaderSendModeToJSON(message.responseHeaderMode);
    }
    if (message.requestBodyMode !== 0) {
      obj.requestBodyMode = processingMode_BodySendModeToJSON(message.requestBodyMode);
    }
    if (message.responseBodyMode !== 0) {
      obj.responseBodyMode = processingMode_BodySendModeToJSON(message.responseBodyMode);
    }
    if (message.requestTrailerMode !== 0) {
      obj.requestTrailerMode = processingMode_HeaderSendModeToJSON(message.requestTrailerMode);
    }
    if (message.responseTrailerMode !== 0) {
      obj.responseTrailerMode = processingMode_HeaderSendModeToJSON(message.responseTrailerMode);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ProcessingMode>, I>>(base?: I): ProcessingMode {
    return ProcessingMode.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ProcessingMode>, I>>(object: I): ProcessingMode {
    const message = createBaseProcessingMode();
    message.requestHeaderMode = object.requestHeaderMode ?? 0;
    message.responseHeaderMode = object.responseHeaderMode ?? 0;
    message.requestBodyMode = object.requestBodyMode ?? 0;
    message.responseBodyMode = object.responseBodyMode ?? 0;
    message.requestTrailerMode = object.requestTrailerMode ?? 0;
    message.responseTrailerMode = object.responseTrailerMode ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
