// @generated by protoc-gen-es v2.9.0 with parameter "target=ts"
// @generated from file envoy/service/ext_proc/v3/external_processor.proto (package envoy.service.ext_proc.v3, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv2";
import type { HeaderMap, HeaderValueOption, Metadata } from "../../../config/core/v3/base_pb.js";
import { file_envoy_config_core_v3_base } from "../../../config/core/v3/base_pb.js";
import type { ProcessingMode, ProcessingMode_BodySendMode } from "../../../extensions/filters/http/ext_proc/v3/processing_mode_pb.js";
import { file_envoy_extensions_filters_http_ext_proc_v3_processing_mode } from "../../../extensions/filters/http/ext_proc/v3/processing_mode_pb.js";
import type { HttpStatus } from "../../../type/v3/http_status_pb.js";
import { file_envoy_type_v3_http_status } from "../../../type/v3/http_status_pb.js";
import type { Duration } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_duration, file_google_protobuf_struct } from "@bufbuild/protobuf/wkt";
import { file_xds_annotations_v3_status } from "../../../../xds/annotations/v3/status_pb.js";
import { file_envoy_annotations_deprecation } from "../../../annotations/deprecation_pb.js";
import { file_udpa_annotations_status } from "../../../../udpa/annotations/status_pb.js";
import { file_validate_validate } from "../../../../validate/validate_pb.js";
import type { JsonObject, Message } from "@bufbuild/protobuf";

/**
 * Describes the file envoy/service/ext_proc/v3/external_processor.proto.
 */
export const file_envoy_service_ext_proc_v3_external_processor: GenFile = /*@__PURE__*/
  fileDesc("CjJlbnZveS9zZXJ2aWNlL2V4dF9wcm9jL3YzL2V4dGVybmFsX3Byb2Nlc3Nvci5wcm90bxIZZW52b3kuc2VydmljZS5leHRfcHJvYy52MyKpAgoVUHJvdG9jb2xDb25maWd1cmF0aW9uEmsKEXJlcXVlc3RfYm9keV9tb2RlGAEgASgOMkYuZW52b3kuZXh0ZW5zaW9ucy5maWx0ZXJzLmh0dHAuZXh0X3Byb2MudjMuUHJvY2Vzc2luZ01vZGUuQm9keVNlbmRNb2RlQgj6QgWCAQIQARJsChJyZXNwb25zZV9ib2R5X21vZGUYAiABKA4yRi5lbnZveS5leHRlbnNpb25zLmZpbHRlcnMuaHR0cC5leHRfcHJvYy52My5Qcm9jZXNzaW5nTW9kZS5Cb2R5U2VuZE1vZGVCCPpCBYIBAhABEjUKLXNlbmRfYm9keV93aXRob3V0X3dhaXRpbmdfZm9yX2hlYWRlcl9yZXNwb25zZRgDIAEoCCKBBgoRUHJvY2Vzc2luZ1JlcXVlc3QSQQoPcmVxdWVzdF9oZWFkZXJzGAIgASgLMiYuZW52b3kuc2VydmljZS5leHRfcHJvYy52My5IdHRwSGVhZGVyc0gAEkIKEHJlc3BvbnNlX2hlYWRlcnMYAyABKAsyJi5lbnZveS5zZXJ2aWNlLmV4dF9wcm9jLnYzLkh0dHBIZWFkZXJzSAASOwoMcmVxdWVzdF9ib2R5GAQgASgLMiMuZW52b3kuc2VydmljZS5leHRfcHJvYy52My5IdHRwQm9keUgAEjwKDXJlc3BvbnNlX2JvZHkYBSABKAsyIy5lbnZveS5zZXJ2aWNlLmV4dF9wcm9jLnYzLkh0dHBCb2R5SAASQwoQcmVxdWVzdF90cmFpbGVycxgGIAEoCzInLmVudm95LnNlcnZpY2UuZXh0X3Byb2MudjMuSHR0cFRyYWlsZXJzSAASRAoRcmVzcG9uc2VfdHJhaWxlcnMYByABKAsyJy5lbnZveS5zZXJ2aWNlLmV4dF9wcm9jLnYzLkh0dHBUcmFpbGVyc0gAEjgKEG1ldGFkYXRhX2NvbnRleHQYCCABKAsyHi5lbnZveS5jb25maWcuY29yZS52My5NZXRhZGF0YRJQCgphdHRyaWJ1dGVzGAkgAygLMjwuZW52b3kuc2VydmljZS5leHRfcHJvYy52My5Qcm9jZXNzaW5nUmVxdWVzdC5BdHRyaWJ1dGVzRW50cnkSGgoSb2JzZXJ2YWJpbGl0eV9tb2RlGAogASgIEkkKD3Byb3RvY29sX2NvbmZpZxgLIAEoCzIwLmVudm95LnNlcnZpY2UuZXh0X3Byb2MudjMuUHJvdG9jb2xDb25maWd1cmF0aW9uGkoKD0F0dHJpYnV0ZXNFbnRyeRILCgNrZXkYASABKAkSJgoFdmFsdWUYAiABKAsyFy5nb29nbGUucHJvdG9idWYuU3RydWN0OgI4AUIOCgdyZXF1ZXN0EgP4QgFKBAgBEAJSCmFzeW5jX21vZGUi2AUKElByb2Nlc3NpbmdSZXNwb25zZRJFCg9yZXF1ZXN0X2hlYWRlcnMYASABKAsyKi5lbnZveS5zZXJ2aWNlLmV4dF9wcm9jLnYzLkhlYWRlcnNSZXNwb25zZUgAEkYKEHJlc3BvbnNlX2hlYWRlcnMYAiABKAsyKi5lbnZveS5zZXJ2aWNlLmV4dF9wcm9jLnYzLkhlYWRlcnNSZXNwb25zZUgAEj8KDHJlcXVlc3RfYm9keRgDIAEoCzInLmVudm95LnNlcnZpY2UuZXh0X3Byb2MudjMuQm9keVJlc3BvbnNlSAASQAoNcmVzcG9uc2VfYm9keRgEIAEoCzInLmVudm95LnNlcnZpY2UuZXh0X3Byb2MudjMuQm9keVJlc3BvbnNlSAASRwoQcmVxdWVzdF90cmFpbGVycxgFIAEoCzIrLmVudm95LnNlcnZpY2UuZXh0X3Byb2MudjMuVHJhaWxlcnNSZXNwb25zZUgAEkgKEXJlc3BvbnNlX3RyYWlsZXJzGAYgASgLMisuZW52b3kuc2VydmljZS5leHRfcHJvYy52My5UcmFpbGVyc1Jlc3BvbnNlSAASSgoSaW1tZWRpYXRlX3Jlc3BvbnNlGAcgASgLMiwuZW52b3kuc2VydmljZS5leHRfcHJvYy52My5JbW1lZGlhdGVSZXNwb25zZUgAEjEKEGR5bmFtaWNfbWV0YWRhdGEYCCABKAsyFy5nb29nbGUucHJvdG9idWYuU3RydWN0ElAKDW1vZGVfb3ZlcnJpZGUYCSABKAsyOS5lbnZveS5leHRlbnNpb25zLmZpbHRlcnMuaHR0cC5leHRfcHJvYy52My5Qcm9jZXNzaW5nTW9kZRI7ChhvdmVycmlkZV9tZXNzYWdlX3RpbWVvdXQYCiABKAsyGS5nb29nbGUucHJvdG9idWYuRHVyYXRpb25CDwoIcmVzcG9uc2USA/hCASL7AQoLSHR0cEhlYWRlcnMSMAoHaGVhZGVycxgBIAEoCzIfLmVudm95LmNvbmZpZy5jb3JlLnYzLkhlYWRlck1hcBJXCgphdHRyaWJ1dGVzGAIgAygLMjYuZW52b3kuc2VydmljZS5leHRfcHJvYy52My5IdHRwSGVhZGVycy5BdHRyaWJ1dGVzRW50cnlCCxgBkseG2AQDMy4wEhUKDWVuZF9vZl9zdHJlYW0YAyABKAgaSgoPQXR0cmlidXRlc0VudHJ5EgsKA2tleRgBIAEoCRImCgV2YWx1ZRgCIAEoCzIXLmdvb2dsZS5wcm90b2J1Zi5TdHJ1Y3Q6AjgBIi8KCEh0dHBCb2R5EgwKBGJvZHkYASABKAwSFQoNZW5kX29mX3N0cmVhbRgCIAEoCCJBCgxIdHRwVHJhaWxlcnMSMQoIdHJhaWxlcnMYASABKAsyHy5lbnZveS5jb25maWcuY29yZS52My5IZWFkZXJNYXAiTgoPSGVhZGVyc1Jlc3BvbnNlEjsKCHJlc3BvbnNlGAEgASgLMikuZW52b3kuc2VydmljZS5leHRfcHJvYy52My5Db21tb25SZXNwb25zZSJLCgxCb2R5UmVzcG9uc2USOwoIcmVzcG9uc2UYASABKAsyKS5lbnZveS5zZXJ2aWNlLmV4dF9wcm9jLnYzLkNvbW1vblJlc3BvbnNlIlYKEFRyYWlsZXJzUmVzcG9uc2USQgoPaGVhZGVyX211dGF0aW9uGAEgASgLMikuZW52b3kuc2VydmljZS5leHRfcHJvYy52My5IZWFkZXJNdXRhdGlvbiLwAgoOQ29tbW9uUmVzcG9uc2USUgoGc3RhdHVzGAEgASgOMjguZW52b3kuc2VydmljZS5leHRfcHJvYy52My5Db21tb25SZXNwb25zZS5SZXNwb25zZVN0YXR1c0II+kIFggECEAESQgoPaGVhZGVyX211dGF0aW9uGAIgASgLMikuZW52b3kuc2VydmljZS5leHRfcHJvYy52My5IZWFkZXJNdXRhdGlvbhI+Cg1ib2R5X211dGF0aW9uGAMgASgLMicuZW52b3kuc2VydmljZS5leHRfcHJvYy52My5Cb2R5TXV0YXRpb24SMQoIdHJhaWxlcnMYBCABKAsyHy5lbnZveS5jb25maWcuY29yZS52My5IZWFkZXJNYXASGQoRY2xlYXJfcm91dGVfY2FjaGUYBSABKAgiOAoOUmVzcG9uc2VTdGF0dXMSDAoIQ09OVElOVUUQABIYChRDT05USU5VRV9BTkRfUkVQTEFDRRABIt8BChFJbW1lZGlhdGVSZXNwb25zZRIzCgZzdGF0dXMYASABKAsyGS5lbnZveS50eXBlLnYzLkh0dHBTdGF0dXNCCPpCBYoBAhABEjoKB2hlYWRlcnMYAiABKAsyKS5lbnZveS5zZXJ2aWNlLmV4dF9wcm9jLnYzLkhlYWRlck11dGF0aW9uEgwKBGJvZHkYAyABKAwSOgoLZ3JwY19zdGF0dXMYBCABKAsyJS5lbnZveS5zZXJ2aWNlLmV4dF9wcm9jLnYzLkdycGNTdGF0dXMSDwoHZGV0YWlscxgFIAEoCSIcCgpHcnBjU3RhdHVzEg4KBnN0YXR1cxgBIAEoDSJmCg5IZWFkZXJNdXRhdGlvbhI8CgtzZXRfaGVhZGVycxgBIAMoCzInLmVudm95LmNvbmZpZy5jb3JlLnYzLkhlYWRlclZhbHVlT3B0aW9uEhYKDnJlbW92ZV9oZWFkZXJzGAIgAygJIjsKFFN0cmVhbWVkQm9keVJlc3BvbnNlEgwKBGJvZHkYASABKAwSFQoNZW5kX29mX3N0cmVhbRgCIAEoCCKYAQoMQm9keU11dGF0aW9uEg4KBGJvZHkYASABKAxIABIUCgpjbGVhcl9ib2R5GAIgASgISAASVgoRc3RyZWFtZWRfcmVzcG9uc2UYAyABKAsyLy5lbnZveS5zZXJ2aWNlLmV4dF9wcm9jLnYzLlN0cmVhbWVkQm9keVJlc3BvbnNlQgjSxqThBgIIAUgAQgoKCG11dGF0aW9uMn8KEUV4dGVybmFsUHJvY2Vzc29yEmoKB1Byb2Nlc3MSLC5lbnZveS5zZXJ2aWNlLmV4dF9wcm9jLnYzLlByb2Nlc3NpbmdSZXF1ZXN0Gi0uZW52b3kuc2VydmljZS5leHRfcHJvYy52My5Qcm9jZXNzaW5nUmVzcG9uc2UoATABQpgBCidpby5lbnZveXByb3h5LmVudm95LnNlcnZpY2UuZXh0X3Byb2MudjNCFkV4dGVybmFsUHJvY2Vzc29yUHJvdG9QAVpLZ2l0aHViLmNvbS9lbnZveXByb3h5L2dvLWNvbnRyb2wtcGxhbmUvZW52b3kvc2VydmljZS9leHRfcHJvYy92MztleHRfcHJvY3YzuoDI0QYCEAJiBnByb3RvMw", [file_envoy_config_core_v3_base, file_envoy_extensions_filters_http_ext_proc_v3_processing_mode, file_envoy_type_v3_http_status, file_google_protobuf_duration, file_google_protobuf_struct, file_xds_annotations_v3_status, file_envoy_annotations_deprecation, file_udpa_annotations_status, file_validate_validate]);

/**
 * This message specifies the filter protocol configurations which will be sent to the ext_proc
 * server in a :ref:`ProcessingRequest <envoy_v3_api_msg_service.ext_proc.v3.ProcessingRequest>`.
 * If the server does not support these protocol configurations, it may choose to close the gRPC stream.
 * If the server supports these protocol configurations, it should respond based on the API specifications.
 *
 * @generated from message envoy.service.ext_proc.v3.ProtocolConfiguration
 */
export type ProtocolConfiguration = Message<"envoy.service.ext_proc.v3.ProtocolConfiguration"> & {
  /**
   * Specify the filter configuration :ref:`request_body_mode
   * <envoy_v3_api_field_extensions.filters.http.ext_proc.v3.ProcessingMode.request_body_mode>`
   *
   * @generated from field: envoy.extensions.filters.http.ext_proc.v3.ProcessingMode.BodySendMode request_body_mode = 1;
   */
  requestBodyMode: ProcessingMode_BodySendMode;

  /**
   * Specify the filter configuration :ref:`response_body_mode
   * <envoy_v3_api_field_extensions.filters.http.ext_proc.v3.ProcessingMode.response_body_mode>`
   *
   * @generated from field: envoy.extensions.filters.http.ext_proc.v3.ProcessingMode.BodySendMode response_body_mode = 2;
   */
  responseBodyMode: ProcessingMode_BodySendMode;

  /**
   * Specify the filter configuration :ref:`send_body_without_waiting_for_header_response
   * <envoy_v3_api_field_extensions.filters.http.ext_proc.v3.ExternalProcessor.send_body_without_waiting_for_header_response>`
   * If the client is waiting for a header response from the server, setting ``true`` means the client will send body to the server
   * as they arrive. Setting ``false`` means the client will buffer the arrived data and not send it to the server immediately.
   *
   * @generated from field: bool send_body_without_waiting_for_header_response = 3;
   */
  sendBodyWithoutWaitingForHeaderResponse: boolean;
};

/**
 * Describes the message envoy.service.ext_proc.v3.ProtocolConfiguration.
 * Use `create(ProtocolConfigurationSchema)` to create a new message.
 */
export const ProtocolConfigurationSchema: GenMessage<ProtocolConfiguration> = /*@__PURE__*/
  messageDesc(file_envoy_service_ext_proc_v3_external_processor, 0);

/**
 * This represents the different types of messages that the data plane can send
 * to an external processing server.
 * [#next-free-field: 12]
 *
 * @generated from message envoy.service.ext_proc.v3.ProcessingRequest
 */
export type ProcessingRequest = Message<"envoy.service.ext_proc.v3.ProcessingRequest"> & {
  /**
   * Each request message will include one of the following sub-messages. Which
   * ones are set for a particular HTTP request/response depend on the
   * processing mode.
   *
   * @generated from oneof envoy.service.ext_proc.v3.ProcessingRequest.request
   */
  request: {
    /**
     * Information about the HTTP request headers, as well as peer info and additional
     * properties. Unless ``observability_mode`` is ``true``, the server must send back a
     * HeaderResponse message, an ImmediateResponse message, or close the stream.
     *
     * @generated from field: envoy.service.ext_proc.v3.HttpHeaders request_headers = 2;
     */
    value: HttpHeaders;
    case: "requestHeaders";
  } | {
    /**
     * Information about the HTTP response headers, as well as peer info and additional
     * properties. Unless ``observability_mode`` is ``true``, the server must send back a
     * HeaderResponse message or close the stream.
     *
     * @generated from field: envoy.service.ext_proc.v3.HttpHeaders response_headers = 3;
     */
    value: HttpHeaders;
    case: "responseHeaders";
  } | {
    /**
     * A chunk of the HTTP request body. Unless ``observability_mode`` is true, the server must send back
     * a BodyResponse message, an ImmediateResponse message, or close the stream.
     *
     * @generated from field: envoy.service.ext_proc.v3.HttpBody request_body = 4;
     */
    value: HttpBody;
    case: "requestBody";
  } | {
    /**
     * A chunk of the HTTP response body. Unless ``observability_mode`` is ``true``, the server must send back
     * a BodyResponse message or close the stream.
     *
     * @generated from field: envoy.service.ext_proc.v3.HttpBody response_body = 5;
     */
    value: HttpBody;
    case: "responseBody";
  } | {
    /**
     * The HTTP trailers for the request path. Unless ``observability_mode`` is ``true``, the server
     * must send back a TrailerResponse message or close the stream.
     *
     * This message is only sent if the trailers processing mode is set to ``SEND`` and
     * the original downstream request has trailers.
     *
     * @generated from field: envoy.service.ext_proc.v3.HttpTrailers request_trailers = 6;
     */
    value: HttpTrailers;
    case: "requestTrailers";
  } | {
    /**
     * The HTTP trailers for the response path. Unless ``observability_mode`` is ``true``, the server
     * must send back a TrailerResponse message or close the stream.
     *
     * This message is only sent if the trailers processing mode is set to ``SEND`` and
     * the original upstream response has trailers.
     *
     * @generated from field: envoy.service.ext_proc.v3.HttpTrailers response_trailers = 7;
     */
    value: HttpTrailers;
    case: "responseTrailers";
  } | { case: undefined; value?: undefined };

  /**
   * Dynamic metadata associated with the request.
   *
   * @generated from field: envoy.config.core.v3.Metadata metadata_context = 8;
   */
  metadataContext?: Metadata;

  /**
   * The values of properties selected by the ``request_attributes``
   * or ``response_attributes`` list in the configuration. Each entry
   * in the list is populated from the standard
   * :ref:`attributes <arch_overview_attributes>` supported in the data plane.
   *
   * @generated from field: map<string, google.protobuf.Struct> attributes = 9;
   */
  attributes: { [key: string]: JsonObject };

  /**
   * Specify whether the filter that sent this request is running in :ref:`observability_mode
   * <envoy_v3_api_field_extensions.filters.http.ext_proc.v3.ExternalProcessor.observability_mode>`
   * and defaults to false.
   *
   * * A value of ``false`` indicates that the server must respond
   *   to this message by either sending back a matching ProcessingResponse message,
   *   or by closing the stream.
   * * A value of ``true`` indicates that the server should not respond to this message, as any
   *   responses will be ignored. However, it may still close the stream to indicate that no more messages
   *   are needed.
   *
   *
   * @generated from field: bool observability_mode = 10;
   */
  observabilityMode: boolean;

  /**
   * Specify the filter protocol configurations to be sent to the server.
   * ``protocol_config`` is only encoded in the first ``ProcessingRequest`` message from the client to the server.
   *
   * @generated from field: envoy.service.ext_proc.v3.ProtocolConfiguration protocol_config = 11;
   */
  protocolConfig?: ProtocolConfiguration;
};

/**
 * Describes the message envoy.service.ext_proc.v3.ProcessingRequest.
 * Use `create(ProcessingRequestSchema)` to create a new message.
 */
export const ProcessingRequestSchema: GenMessage<ProcessingRequest> = /*@__PURE__*/
  messageDesc(file_envoy_service_ext_proc_v3_external_processor, 1);

/**
 * This represents the different types of messages the server may send back to the data plane
 * when the ``observability_mode`` field in the received ProcessingRequest is set to false.
 *
 * * If the corresponding ``BodySendMode`` in the
 *   :ref:`processing_mode <envoy_v3_api_field_extensions.filters.http.ext_proc.v3.ExternalProcessor.processing_mode>`
 *   is not set to ``FULL_DUPLEX_STREAMED``, then for every received ProcessingRequest,
 *   the server must send back exactly one ProcessingResponse message.
 * * If it is set to ``FULL_DUPLEX_STREAMED``, the server must follow the API defined
 *   for this mode to send the ProcessingResponse messages.
 * [#next-free-field: 11]
 *
 * @generated from message envoy.service.ext_proc.v3.ProcessingResponse
 */
export type ProcessingResponse = Message<"envoy.service.ext_proc.v3.ProcessingResponse"> & {
  /**
   * The response type that is sent by the server.
   *
   * @generated from oneof envoy.service.ext_proc.v3.ProcessingResponse.response
   */
  response: {
    /**
     * The server must send back this message in response to a message with the
     * ``request_headers`` field set.
     *
     * @generated from field: envoy.service.ext_proc.v3.HeadersResponse request_headers = 1;
     */
    value: HeadersResponse;
    case: "requestHeaders";
  } | {
    /**
     * The server must send back this message in response to a message with the
     * ``response_headers`` field set.
     *
     * @generated from field: envoy.service.ext_proc.v3.HeadersResponse response_headers = 2;
     */
    value: HeadersResponse;
    case: "responseHeaders";
  } | {
    /**
     * The server must send back this message in response to a message with
     * the ``request_body`` field set.
     *
     * @generated from field: envoy.service.ext_proc.v3.BodyResponse request_body = 3;
     */
    value: BodyResponse;
    case: "requestBody";
  } | {
    /**
     * The server must send back this message in response to a message with
     * the ``response_body`` field set.
     *
     * @generated from field: envoy.service.ext_proc.v3.BodyResponse response_body = 4;
     */
    value: BodyResponse;
    case: "responseBody";
  } | {
    /**
     * The server must send back this message in response to a message with
     * the ``request_trailers`` field set.
     *
     * @generated from field: envoy.service.ext_proc.v3.TrailersResponse request_trailers = 5;
     */
    value: TrailersResponse;
    case: "requestTrailers";
  } | {
    /**
     * The server must send back this message in response to a message with
     * the ``response_trailers`` field set.
     *
     * @generated from field: envoy.service.ext_proc.v3.TrailersResponse response_trailers = 6;
     */
    value: TrailersResponse;
    case: "responseTrailers";
  } | {
    /**
     * If specified, attempt to create a locally generated response, send it
     * downstream, and stop processing additional filters and ignore any
     * additional messages received from the remote server for this request or
     * response. If a response has already started -- for example, if this
     * message is sent response to a ``response_body`` message -- then
     * this will either ship the reply directly to the downstream codec,
     * or reset the stream.
     *
     * @generated from field: envoy.service.ext_proc.v3.ImmediateResponse immediate_response = 7;
     */
    value: ImmediateResponse;
    case: "immediateResponse";
  } | { case: undefined; value?: undefined };

  /**
   * Optional metadata that will be emitted as dynamic metadata to be consumed by
   * following filters. This metadata will be placed in the namespace(s) specified by the top-level
   * field name(s) of the struct.
   *
   * @generated from field: google.protobuf.Struct dynamic_metadata = 8;
   */
  dynamicMetadata?: JsonObject;

  /**
   * Override how parts of the HTTP request and response are processed
   * for the duration of this particular request/response only. Servers
   * may use this to intelligently control how requests are processed
   * based on the headers and other metadata that they see.
   * This field is only applicable when servers responding to the header requests.
   * If it is set in the response to the body or trailer requests, it will be ignored by the data plane.
   * It is also ignored by the data plane when the ext_proc filter config
   * :ref:`allow_mode_override
   * <envoy_v3_api_field_extensions.filters.http.ext_proc.v3.ExternalProcessor.allow_mode_override>`
   * is set to false, or
   * :ref:`send_body_without_waiting_for_header_response
   * <envoy_v3_api_field_extensions.filters.http.ext_proc.v3.ExternalProcessor.send_body_without_waiting_for_header_response>`
   * is set to true.
   *
   * @generated from field: envoy.extensions.filters.http.ext_proc.v3.ProcessingMode mode_override = 9;
   */
  modeOverride?: ProcessingMode;

  /**
   * When ext_proc server receives a request message, in case it needs more
   * time to process the message, it sends back a ProcessingResponse message
   * with a new timeout value. When the data plane receives this response
   * message, it ignores other fields in the response, just stop the original
   * timer, which has the timeout value specified in
   * :ref:`message_timeout
   * <envoy_v3_api_field_extensions.filters.http.ext_proc.v3.ExternalProcessor.message_timeout>`
   * and start a new timer with this ``override_message_timeout`` value and keep the
   * data plane ext_proc filter state machine intact.
   * Has to be >= 1ms and <=
   * :ref:`max_message_timeout <envoy_v3_api_field_extensions.filters.http.ext_proc.v3.ExternalProcessor.max_message_timeout>`
   * Such message can be sent at most once in a particular data plane ext_proc filter processing state.
   * To enable this API, one has to set ``max_message_timeout`` to a number >= 1ms.
   *
   * @generated from field: google.protobuf.Duration override_message_timeout = 10;
   */
  overrideMessageTimeout?: Duration;
};

/**
 * Describes the message envoy.service.ext_proc.v3.ProcessingResponse.
 * Use `create(ProcessingResponseSchema)` to create a new message.
 */
export const ProcessingResponseSchema: GenMessage<ProcessingResponse> = /*@__PURE__*/
  messageDesc(file_envoy_service_ext_proc_v3_external_processor, 2);

/**
 * This message is sent to the external server when the HTTP request and responses
 * are first received.
 *
 * @generated from message envoy.service.ext_proc.v3.HttpHeaders
 */
export type HttpHeaders = Message<"envoy.service.ext_proc.v3.HttpHeaders"> & {
  /**
   * The HTTP request headers. All header keys will be
   * lower-cased, because HTTP header keys are case-insensitive.
   * The header value is encoded in the
   * :ref:`raw_value <envoy_v3_api_field_config.core.v3.HeaderValue.raw_value>` field.
   *
   * @generated from field: envoy.config.core.v3.HeaderMap headers = 1;
   */
  headers?: HeaderMap;

  /**
   * [#not-implemented-hide:]
   * This field is deprecated and not implemented. Attributes will be sent in
   * the  top-level :ref:`attributes <envoy_v3_api_field_service.ext_proc.v3.ProcessingRequest.attributes`
   * field.
   *
   * @generated from field: map<string, google.protobuf.Struct> attributes = 2 [deprecated = true];
   * @deprecated
   */
  attributes: { [key: string]: JsonObject };

  /**
   * If ``true``, then there is no message body associated with this
   * request or response.
   *
   * @generated from field: bool end_of_stream = 3;
   */
  endOfStream: boolean;
};

/**
 * Describes the message envoy.service.ext_proc.v3.HttpHeaders.
 * Use `create(HttpHeadersSchema)` to create a new message.
 */
export const HttpHeadersSchema: GenMessage<HttpHeaders> = /*@__PURE__*/
  messageDesc(file_envoy_service_ext_proc_v3_external_processor, 3);

/**
 * This message is sent to the external server when the HTTP request and
 * response bodies are received.
 *
 * @generated from message envoy.service.ext_proc.v3.HttpBody
 */
export type HttpBody = Message<"envoy.service.ext_proc.v3.HttpBody"> & {
  /**
   * The contents of the body in the HTTP request/response. Note that in
   * streaming mode multiple ``HttpBody`` messages may be sent.
   *
   * @generated from field: bytes body = 1;
   */
  body: Uint8Array;

  /**
   * If ``true``, this will be the last ``HttpBody`` message that will be sent and no
   * trailers will be sent for the current request/response.
   *
   * @generated from field: bool end_of_stream = 2;
   */
  endOfStream: boolean;
};

/**
 * Describes the message envoy.service.ext_proc.v3.HttpBody.
 * Use `create(HttpBodySchema)` to create a new message.
 */
export const HttpBodySchema: GenMessage<HttpBody> = /*@__PURE__*/
  messageDesc(file_envoy_service_ext_proc_v3_external_processor, 4);

/**
 * This message is sent to the external server when the HTTP request and
 * response trailers are received.
 *
 * @generated from message envoy.service.ext_proc.v3.HttpTrailers
 */
export type HttpTrailers = Message<"envoy.service.ext_proc.v3.HttpTrailers"> & {
  /**
   * The header value is encoded in the
   * :ref:`raw_value <envoy_v3_api_field_config.core.v3.HeaderValue.raw_value>` field.
   *
   * @generated from field: envoy.config.core.v3.HeaderMap trailers = 1;
   */
  trailers?: HeaderMap;
};

/**
 * Describes the message envoy.service.ext_proc.v3.HttpTrailers.
 * Use `create(HttpTrailersSchema)` to create a new message.
 */
export const HttpTrailersSchema: GenMessage<HttpTrailers> = /*@__PURE__*/
  messageDesc(file_envoy_service_ext_proc_v3_external_processor, 5);

/**
 * This message is sent by the external server to the data plane after ``HttpHeaders`` was
 * sent to it.
 *
 * @generated from message envoy.service.ext_proc.v3.HeadersResponse
 */
export type HeadersResponse = Message<"envoy.service.ext_proc.v3.HeadersResponse"> & {
  /**
   * Details the modifications (if any) to be made by the data plane to the current
   * request/response.
   *
   * @generated from field: envoy.service.ext_proc.v3.CommonResponse response = 1;
   */
  response?: CommonResponse;
};

/**
 * Describes the message envoy.service.ext_proc.v3.HeadersResponse.
 * Use `create(HeadersResponseSchema)` to create a new message.
 */
export const HeadersResponseSchema: GenMessage<HeadersResponse> = /*@__PURE__*/
  messageDesc(file_envoy_service_ext_proc_v3_external_processor, 6);

/**
 * This message is sent by the external server to the data plane after ``HttpBody`` was
 * sent to it.
 *
 * @generated from message envoy.service.ext_proc.v3.BodyResponse
 */
export type BodyResponse = Message<"envoy.service.ext_proc.v3.BodyResponse"> & {
  /**
   * Details the modifications (if any) to be made by the data plane to the current
   * request/response.
   *
   * @generated from field: envoy.service.ext_proc.v3.CommonResponse response = 1;
   */
  response?: CommonResponse;
};

/**
 * Describes the message envoy.service.ext_proc.v3.BodyResponse.
 * Use `create(BodyResponseSchema)` to create a new message.
 */
export const BodyResponseSchema: GenMessage<BodyResponse> = /*@__PURE__*/
  messageDesc(file_envoy_service_ext_proc_v3_external_processor, 7);

/**
 * This message is sent by the external server to the data plane after ``HttpTrailers`` was
 * sent to it.
 *
 * @generated from message envoy.service.ext_proc.v3.TrailersResponse
 */
export type TrailersResponse = Message<"envoy.service.ext_proc.v3.TrailersResponse"> & {
  /**
   * Details the modifications (if any) to be made by the data plane to the current
   * request/response trailers.
   *
   * @generated from field: envoy.service.ext_proc.v3.HeaderMutation header_mutation = 1;
   */
  headerMutation?: HeaderMutation;
};

/**
 * Describes the message envoy.service.ext_proc.v3.TrailersResponse.
 * Use `create(TrailersResponseSchema)` to create a new message.
 */
export const TrailersResponseSchema: GenMessage<TrailersResponse> = /*@__PURE__*/
  messageDesc(file_envoy_service_ext_proc_v3_external_processor, 8);

/**
 * This message contains common fields between header and body responses.
 * [#next-free-field: 6]
 *
 * @generated from message envoy.service.ext_proc.v3.CommonResponse
 */
export type CommonResponse = Message<"envoy.service.ext_proc.v3.CommonResponse"> & {
  /**
   * If set, provide additional direction on how the data plane should
   * handle the rest of the HTTP filter chain.
   *
   * @generated from field: envoy.service.ext_proc.v3.CommonResponse.ResponseStatus status = 1;
   */
  status: CommonResponse_ResponseStatus;

  /**
   * Instructions on how to manipulate the headers. When responding to an
   * HttpBody request, header mutations will only take effect if
   * the current processing mode for the body is BUFFERED.
   *
   * @generated from field: envoy.service.ext_proc.v3.HeaderMutation header_mutation = 2;
   */
  headerMutation?: HeaderMutation;

  /**
   * Replace the body of the last message sent to the remote server on this
   * stream. If responding to an HttpBody request, simply replace or clear
   * the body chunk that was sent with that request. Body mutations may take
   * effect in response either to ``header`` or ``body`` messages. When it is
   * in response to ``header`` messages, it only take effect if the
   * :ref:`status <envoy_v3_api_field_service.ext_proc.v3.CommonResponse.status>`
   * is set to CONTINUE_AND_REPLACE.
   *
   * @generated from field: envoy.service.ext_proc.v3.BodyMutation body_mutation = 3;
   */
  bodyMutation?: BodyMutation;

  /**
   * [#not-implemented-hide:]
   * Add new trailers to the message. This may be used when responding to either a
   * HttpHeaders or HttpBody message, but only if this message is returned
   * along with the CONTINUE_AND_REPLACE status.
   * The header value is encoded in the
   * :ref:`raw_value <envoy_v3_api_field_config.core.v3.HeaderValue.raw_value>` field.
   *
   * @generated from field: envoy.config.core.v3.HeaderMap trailers = 4;
   */
  trailers?: HeaderMap;

  /**
   * Clear the route cache for the current client request. This is necessary
   * if the remote server modified headers that are used to calculate the route.
   * This field is ignored in the response direction. This field is also ignored
   * if the data plane ext_proc filter is in the upstream filter chain.
   *
   * @generated from field: bool clear_route_cache = 5;
   */
  clearRouteCache: boolean;
};

/**
 * Describes the message envoy.service.ext_proc.v3.CommonResponse.
 * Use `create(CommonResponseSchema)` to create a new message.
 */
export const CommonResponseSchema: GenMessage<CommonResponse> = /*@__PURE__*/
  messageDesc(file_envoy_service_ext_proc_v3_external_processor, 9);

/**
 * The status of the response.
 *
 * @generated from enum envoy.service.ext_proc.v3.CommonResponse.ResponseStatus
 */
export enum CommonResponse_ResponseStatus {
  /**
   * Apply the mutation instructions in this message to the
   * request or response, and then continue processing the filter
   * stream as normal. This is the default.
   *
   * @generated from enum value: CONTINUE = 0;
   */
  CONTINUE = 0,

  /**
   * Apply the specified header mutation, replace the body with the body
   * specified in the body mutation (if present), and do not send any
   * further messages for this request or response even if the processing
   * mode is configured to do so.
   *
   * When used in response to a request_headers or response_headers message,
   * this status makes it possible to either completely replace the body
   * while discarding the original body, or to add a body to a message that
   * formerly did not have one.
   *
   * In other words, this response makes it possible to turn an HTTP GET
   * into a POST, PUT, or PATCH.
   *
   * @generated from enum value: CONTINUE_AND_REPLACE = 1;
   */
  CONTINUE_AND_REPLACE = 1,
}

/**
 * Describes the enum envoy.service.ext_proc.v3.CommonResponse.ResponseStatus.
 */
export const CommonResponse_ResponseStatusSchema: GenEnum<CommonResponse_ResponseStatus> = /*@__PURE__*/
  enumDesc(file_envoy_service_ext_proc_v3_external_processor, 9, 0);

/**
 * This message causes the filter to attempt to create a locally
 * generated response, send it  downstream, stop processing
 * additional filters, and ignore any additional messages received
 * from the remote server for this request or response. If a response
 * has already started, then  this will either ship the reply directly
 * to the downstream codec, or reset the stream.
 * [#next-free-field: 6]
 *
 * @generated from message envoy.service.ext_proc.v3.ImmediateResponse
 */
export type ImmediateResponse = Message<"envoy.service.ext_proc.v3.ImmediateResponse"> & {
  /**
   * The response code to return.
   *
   * @generated from field: envoy.type.v3.HttpStatus status = 1;
   */
  status?: HttpStatus;

  /**
   * Apply changes to the default headers, which will include content-type.
   *
   * @generated from field: envoy.service.ext_proc.v3.HeaderMutation headers = 2;
   */
  headers?: HeaderMutation;

  /**
   * The message body to return with the response which is sent using the
   * text/plain content type, or encoded in the grpc-message header.
   *
   * @generated from field: bytes body = 3;
   */
  body: Uint8Array;

  /**
   * If set, then include a gRPC status trailer.
   *
   * @generated from field: envoy.service.ext_proc.v3.GrpcStatus grpc_status = 4;
   */
  grpcStatus?: GrpcStatus;

  /**
   * A string detailing why this local reply was sent, which may be included
   * in log and debug output (e.g. this populates the %RESPONSE_CODE_DETAILS%
   * command operator field for use in access logging).
   *
   * @generated from field: string details = 5;
   */
  details: string;
};

/**
 * Describes the message envoy.service.ext_proc.v3.ImmediateResponse.
 * Use `create(ImmediateResponseSchema)` to create a new message.
 */
export const ImmediateResponseSchema: GenMessage<ImmediateResponse> = /*@__PURE__*/
  messageDesc(file_envoy_service_ext_proc_v3_external_processor, 10);

/**
 * This message specifies a gRPC status for an ImmediateResponse message.
 *
 * @generated from message envoy.service.ext_proc.v3.GrpcStatus
 */
export type GrpcStatus = Message<"envoy.service.ext_proc.v3.GrpcStatus"> & {
  /**
   * The actual gRPC status.
   *
   * @generated from field: uint32 status = 1;
   */
  status: number;
};

/**
 * Describes the message envoy.service.ext_proc.v3.GrpcStatus.
 * Use `create(GrpcStatusSchema)` to create a new message.
 */
export const GrpcStatusSchema: GenMessage<GrpcStatus> = /*@__PURE__*/
  messageDesc(file_envoy_service_ext_proc_v3_external_processor, 11);

/**
 * Change HTTP headers or trailers by appending, replacing, or removing
 * headers.
 *
 * @generated from message envoy.service.ext_proc.v3.HeaderMutation
 */
export type HeaderMutation = Message<"envoy.service.ext_proc.v3.HeaderMutation"> & {
  /**
   * Add or replace HTTP headers. Attempts to set the value of
   * any ``x-envoy`` header, and attempts to set the ``:method``,
   * ``:authority``, ``:scheme``, or ``host`` headers will be ignored.
   * The header value is encoded in the
   * :ref:`raw_value <envoy_v3_api_field_config.core.v3.HeaderValue.raw_value>` field.
   *
   * @generated from field: repeated envoy.config.core.v3.HeaderValueOption set_headers = 1;
   */
  setHeaders: HeaderValueOption[];

  /**
   * Remove these HTTP headers. Attempts to remove system headers --
   * any header starting with ``:``, plus ``host`` -- will be ignored.
   *
   * @generated from field: repeated string remove_headers = 2;
   */
  removeHeaders: string[];
};

/**
 * Describes the message envoy.service.ext_proc.v3.HeaderMutation.
 * Use `create(HeaderMutationSchema)` to create a new message.
 */
export const HeaderMutationSchema: GenMessage<HeaderMutation> = /*@__PURE__*/
  messageDesc(file_envoy_service_ext_proc_v3_external_processor, 12);

/**
 * The body response message corresponding to FULL_DUPLEX_STREAMED body mode.
 *
 * @generated from message envoy.service.ext_proc.v3.StreamedBodyResponse
 */
export type StreamedBodyResponse = Message<"envoy.service.ext_proc.v3.StreamedBodyResponse"> & {
  /**
   * The body response chunk that will be passed to the upstream/downstream by the data plane.
   *
   * @generated from field: bytes body = 1;
   */
  body: Uint8Array;

  /**
   * The server sets this flag to true if it has received a body request with
   * :ref:`end_of_stream <envoy_v3_api_field_service.ext_proc.v3.HttpBody.end_of_stream>` set to true,
   * and this is the last chunk of body responses.
   *
   * @generated from field: bool end_of_stream = 2;
   */
  endOfStream: boolean;
};

/**
 * Describes the message envoy.service.ext_proc.v3.StreamedBodyResponse.
 * Use `create(StreamedBodyResponseSchema)` to create a new message.
 */
export const StreamedBodyResponseSchema: GenMessage<StreamedBodyResponse> = /*@__PURE__*/
  messageDesc(file_envoy_service_ext_proc_v3_external_processor, 13);

/**
 * This message specifies the body mutation the server sends to the data plane.
 *
 * @generated from message envoy.service.ext_proc.v3.BodyMutation
 */
export type BodyMutation = Message<"envoy.service.ext_proc.v3.BodyMutation"> & {
  /**
   * The type of mutation for the body.
   *
   * @generated from oneof envoy.service.ext_proc.v3.BodyMutation.mutation
   */
  mutation: {
    /**
     * The entire body to replace.
     * Should only be used when the corresponding ``BodySendMode`` in the
     * :ref:`processing_mode <envoy_v3_api_field_extensions.filters.http.ext_proc.v3.ExternalProcessor.processing_mode>`
     * is not set to ``FULL_DUPLEX_STREAMED``.
     *
     * @generated from field: bytes body = 1;
     */
    value: Uint8Array;
    case: "body";
  } | {
    /**
     * Clear the corresponding body chunk.
     * Should only be used when the corresponding ``BodySendMode`` in the
     * :ref:`processing_mode <envoy_v3_api_field_extensions.filters.http.ext_proc.v3.ExternalProcessor.processing_mode>`
     * is not set to ``FULL_DUPLEX_STREAMED``.
     * Clear the corresponding body chunk.
     *
     * @generated from field: bool clear_body = 2;
     */
    value: boolean;
    case: "clearBody";
  } | {
    /**
     * Must be used when the corresponding ``BodySendMode`` in the
     * :ref:`processing_mode <envoy_v3_api_field_extensions.filters.http.ext_proc.v3.ExternalProcessor.processing_mode>`
     * is set to ``FULL_DUPLEX_STREAMED``.
     *
     * @generated from field: envoy.service.ext_proc.v3.StreamedBodyResponse streamed_response = 3;
     */
    value: StreamedBodyResponse;
    case: "streamedResponse";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message envoy.service.ext_proc.v3.BodyMutation.
 * Use `create(BodyMutationSchema)` to create a new message.
 */
export const BodyMutationSchema: GenMessage<BodyMutation> = /*@__PURE__*/
  messageDesc(file_envoy_service_ext_proc_v3_external_processor, 14);

/**
 * A service that can access and modify HTTP requests and responses
 * as part of a filter chain.
 * The overall external processing protocol works like this:
 *
 * 1. The data plane sends to the service information about the HTTP request.
 * 2. The service sends back a ProcessingResponse message that directs
 *    the data plane to either stop processing, continue without it, or send
 *    it the next chunk of the message body.
 * 3. If so requested, the data plane sends the server the message body in
 *    chunks, or the entire body at once. In either case, the server may send
 *    back a ProcessingResponse for each message it receives, or wait for
 *    a certain amount of body chunks received before streaming back the
 *    ProcessingResponse messages.
 * 4. If so requested, the data plane sends the server the HTTP trailers,
 *    and the server sends back a ProcessingResponse.
 * 5. At this point, request processing is done, and we pick up again
 *    at step 1 when the data plane receives a response from the upstream
 *    server.
 * 6. At any point above, if the server closes the gRPC stream cleanly,
 *    then the data plane proceeds without consulting the server.
 * 7. At any point above, if the server closes the gRPC stream with an error,
 *    then the data plane returns a 500 error to the client, unless the filter
 *    was configured to ignore errors.
 *
 * In other words, the process is a request/response conversation, but
 * using a gRPC stream to make it easier for the server to
 * maintain state.
 *
 * @generated from service envoy.service.ext_proc.v3.ExternalProcessor
 */
export const ExternalProcessor: GenService<{
  /**
   * This begins the bidirectional stream that the data plane will use to
   * give the server control over what the filter does. The actual
   * protocol is described by the ProcessingRequest and ProcessingResponse
   * messages below.
   *
   * @generated from rpc envoy.service.ext_proc.v3.ExternalProcessor.Process
   */
  process: {
    methodKind: "bidi_streaming";
    input: typeof ProcessingRequestSchema;
    output: typeof ProcessingResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_envoy_service_ext_proc_v3_external_processor, 0);

