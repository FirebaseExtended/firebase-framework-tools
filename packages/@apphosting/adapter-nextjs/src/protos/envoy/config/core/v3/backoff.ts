// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.1
// source: envoy/config/core/v3/backoff.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Duration } from "../../../../google/protobuf/duration.js";

export const protobufPackage = "envoy.config.core.v3";

/** Configuration defining a jittered exponential back off strategy. */
export interface BackoffStrategy {
  /**
   * The base interval to be used for the next back off computation. It should
   * be greater than zero and less than or equal to :ref:`max_interval
   * <envoy_v3_api_field_config.core.v3.BackoffStrategy.max_interval>`.
   */
  baseInterval:
    | Duration
    | undefined;
  /**
   * Specifies the maximum interval between retries. This parameter is optional,
   * but must be greater than or equal to the :ref:`base_interval
   * <envoy_v3_api_field_config.core.v3.BackoffStrategy.base_interval>` if set. The default
   * is 10 times the :ref:`base_interval
   * <envoy_v3_api_field_config.core.v3.BackoffStrategy.base_interval>`.
   */
  maxInterval: Duration | undefined;
}

function createBaseBackoffStrategy(): BackoffStrategy {
  return { baseInterval: undefined, maxInterval: undefined };
}

export const BackoffStrategy: MessageFns<BackoffStrategy> = {
  encode(message: BackoffStrategy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.baseInterval !== undefined) {
      Duration.encode(message.baseInterval, writer.uint32(10).fork()).join();
    }
    if (message.maxInterval !== undefined) {
      Duration.encode(message.maxInterval, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BackoffStrategy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBackoffStrategy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.baseInterval = Duration.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.maxInterval = Duration.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BackoffStrategy {
    return {
      baseInterval: isSet(object.baseInterval) ? Duration.fromJSON(object.baseInterval) : undefined,
      maxInterval: isSet(object.maxInterval) ? Duration.fromJSON(object.maxInterval) : undefined,
    };
  },

  toJSON(message: BackoffStrategy): unknown {
    const obj: any = {};
    if (message.baseInterval !== undefined) {
      obj.baseInterval = Duration.toJSON(message.baseInterval);
    }
    if (message.maxInterval !== undefined) {
      obj.maxInterval = Duration.toJSON(message.maxInterval);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BackoffStrategy>, I>>(base?: I): BackoffStrategy {
    return BackoffStrategy.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BackoffStrategy>, I>>(object: I): BackoffStrategy {
    const message = createBaseBackoffStrategy();
    message.baseInterval = (object.baseInterval !== undefined && object.baseInterval !== null)
      ? Duration.fromPartial(object.baseInterval)
      : undefined;
    message.maxInterval = (object.maxInterval !== undefined && object.maxInterval !== null)
      ? Duration.fromPartial(object.maxInterval)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
