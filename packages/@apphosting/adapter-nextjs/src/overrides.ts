import { AdapterMetadata, MiddlewareManifest } from "./interfaces.js";
import {
  loadRouteManifest,
  writeRouteManifest,
  loadMiddlewareManifest,
  loadRequiredServerFiles,
  writeRequiredServerFiles,
} from "./utils.js";

export async function addAppHostingOverrides(
  appPath: string,
  distDir: string,
  adapterMetadata: AdapterMetadata,
) {
  await addRouteOverrides(appPath, distDir, adapterMetadata);
  await addNextConfigOverrides(appPath, distDir);
}

/**
 * Modifies the app's route manifest (routes-manifest.json) to add Firebase App Hosting
 * specific overrides (i.e headers).
 *
 * This function adds the following headers to all routes:
 * - x-fah-adapter: The Firebase App Hosting adapter version used to build the app.
 * - x-fah-middleware: When middleware is enabled.
 *
 * @param appPath The path to the app directory.
 * @param distDir The path to the dist directory.
 * @param adapterMetadata The adapter metadata.
 */
async function addRouteOverrides(
  appPath: string,
  distDir: string,
  adapterMetadata: AdapterMetadata,
) {
  const middlewareManifest = loadMiddlewareManifest(appPath, distDir);
  const routeManifest = loadRouteManifest(appPath, distDir);
  routeManifest.headers.push({
    source: "/:path*",
    headers: [
      {
        key: "x-fah-adapter",
        value: `nextjs-${adapterMetadata.adapterVersion}`,
      },
      ...(middlewareExists(middlewareManifest)
        ? [
            {
              key: "x-fah-middleware",
              value: "true",
            },
          ]
        : []),
    ],
    /* 
      NextJs converts the source string to a regex using path-to-regexp (https://github.com/pillarjs/path-to-regexp) at 
      build time: https://github.com/vercel/next.js/blob/canary/packages/next/src/build/index.ts#L1273.
      This regex is then used to match the route against the request path.

      This regex was generated by building a sample NextJs app with the source string `/:path*` and then inspecting the
      routes-manifest.json file.
    */
    regex: "^(?:/((?:[^/]+?)(?:/(?:[^/]+?))*))?(?:/)?$",
  });

  await writeRouteManifest(appPath, distDir, routeManifest);
}

async function addNextConfigOverrides(appPath: string, distDir: string) {
  let requiredServerFiles = loadRequiredServerFiles(appPath, distDir);
  requiredServerFiles.config.images = {
    ...requiredServerFiles.config.images,
    unoptimized: true,
  };
  await writeRequiredServerFiles(appPath, distDir, requiredServerFiles);
}

function middlewareExists(middlewareManifest: MiddlewareManifest) {
  return Object.keys(middlewareManifest.middleware).length > 0;
}
