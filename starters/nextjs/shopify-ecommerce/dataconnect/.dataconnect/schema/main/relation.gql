extend type Product {
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "Product", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `Product` table.
  """
  _count: Int! @fdc_generated(from: "Product.", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Product` table where the `descriptionEmbedding` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  descriptionEmbedding_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Product.descriptionEmbedding", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Product` table where the `description` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  description_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Product.description", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Product` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Product.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Product` table where the `nameEmbedding` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  nameEmbedding_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Product.nameEmbedding", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Product` table where the `name` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  name_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Product.name", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Product` table where the `price` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  price_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Product.price", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Product` table where the `productID` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  productID_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Product.productID", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Product` table where the `productSlug` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  productSlug_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Product.productSlug", purpose: QUERY_COUNT)
  """
  ✨ Sum the `price` field in the `Product` table.
  """
  price_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "Product.price", purpose: QUERY_SUM)
  """
  ✨ Average the `price` field in the `Product` table.
  """
  price_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "Product.price", purpose: QUERY_AVG)
  """
  ✨ Minimum of the `price` field in the `Product` table.
  """
  price_min: Float @fdc_generated(from: "Product.price", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `price` field in the `Product` table.
  """
  price_max: Float @fdc_generated(from: "Product.price", purpose: QUERY_MAX)
}
extend type Review {
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "Review", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `Review` table.
  """
  _count: Int! @fdc_generated(from: "Review.", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Review` table where the `contentEmbedding` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  contentEmbedding_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Review.contentEmbedding", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Review` table where the `content` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  content_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Review.content", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Review` table where the `createdAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  createdAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Review.createdAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Review` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Review.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Review` table where the `productID` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  productID_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Review.productID", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Review` table where the `productName` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  productName_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Review.productName", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Review` table where the `productSlug` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  productSlug_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Review.productSlug", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Review` table where the `rating` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  rating_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Review.rating", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Review` table where the `userID` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  userID_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Review.userID", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Review` table where the `userName` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  userName_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Review.userName", purpose: QUERY_COUNT)
  """
  ✨ Sum the `rating` field in the `Review` table.
  """
  rating_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "Review.rating", purpose: QUERY_SUM)
  """
  ✨ Average the `rating` field in the `Review` table.
  """
  rating_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "Review.rating", purpose: QUERY_AVG)
  """
  ✨ Minimum of the `createdAt` field in the `Review` table.
  """
  createdAt_min: Date @fdc_generated(from: "Review.createdAt", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `rating` field in the `Review` table.
  """
  rating_min: Float @fdc_generated(from: "Review.rating", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `createdAt` field in the `Review` table.
  """
  createdAt_max: Date @fdc_generated(from: "Review.createdAt", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `rating` field in the `Review` table.
  """
  rating_max: Float @fdc_generated(from: "Review.rating", purpose: QUERY_MAX)
}
