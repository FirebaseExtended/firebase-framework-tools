# List all users, only admins should be able to list all users, so we use NO_ACCESS
query ListCustomers @auth(level: NO_ACCESS) {
  customers {
    id
    firstName
    lastName
    email
  }
}

# Get all reviews under a product by handle
query GetReviewsByHandle($handle: String!) @auth(level: PUBLIC) {
  products(where: { handle: { eq: $handle } }) {
    productReviews_on_product(orderBy: [{ date: DESC }]) {
      id
      rating
      content
      date
      customer {
        id
        firstName
        lastName
      }
    }
  }
}

# Get a product by handle
query GetProductByHandle($handle: String!) @auth(level: PUBLIC) {
  product(first: { where: { handle: { eq: $handle } } }) {
    id
    title
    description
    handle
    availableForSale
    createdAt
    updatedAt
    featuredImage {
      url
      width
      height
      altText
    }
    seo {
      title
      description
      keywords
    }
    productVariants_on_product {
      id
      price
      availableForSale
      inventoryQuantity
      selectedOptions_on_productVariant {
        name
        value
      }
    }
    productImages_on_product(orderBy: [{ displayPosition: ASC }]) {
      id
      url
      altText
      width
      height
      displayPosition
    }
  }
}

# Get a collection by handle
query GetCollectionByHandle($handle: String!, $page: String) @auth(level: PUBLIC) {
  collections(where: { handle: { eq: $handle }, page: { eq: $page } }) {
    id
    name
    description
    page
    featuredImage {
      url
      width
      height
      altText
    }
    seo {
      title
      description
      keywords
    }
    products_via_ProductCollection {
      id
      title
      handle
      description
      availableForSale
      createdAt
      updatedAt
      productVariants_on_product {
        id
        price
        availableForSale
        inventoryQuantity
        selectedOptions_on_productVariant {
          name
          value
        }
      }
      productImages_on_product(orderBy: [{ displayPosition: ASC }]) {
        id
        url
        altText
        width
        height
        displayPosition
      }
    }
  }
}

# Get collections by page
query GetCollectionsByPage($page: String) @auth(level: PUBLIC) {
  collections(where: { page: { eq: $page } }) {
    id
    name
    description
    handle
    page
    featuredImage {
      url
      width
      height
      altText
    }
    products_via_ProductCollection {
      id
      title
      handle
      description
      productVariants_on_product {
        id
        price
        selectedOptions_on_productVariant {
          name
          value
        }
      }
      productImages_on_product(orderBy: [{ displayPosition: ASC }]) {
        id
        url
        altText
        width
        height
        displayPosition
      }
    }
  }
}

# Get products by its description using vector search
query SearchProductDescriptionUsingL2Similarity($query: String!) @auth(level: PUBLIC) {
  products_descriptionEmbedding_similarity(
    compare_embed: { model: "textembedding-gecko@003", text: $query }
    method: COSINE
    within: 0.75
    limit: 20
  ) {
    id
    handle
    title
  }
}

# Get products by its title using vector search
query SearchProductTitleUsingL2Similarity($query: String!) @auth(level: PUBLIC) {
  products_titleEmbedding_similarity(
    compare_embed: { model: "textembedding-gecko@003", text: $query }
    method: COSINE
    within: 0.75
    limit: 20
  ) {
    id
    handle
    title
  }
}

# Get products by its reviews using vector search
query SearchProductReviewContentUsingL2Similarity($query: String!) @auth(level: PUBLIC) {
  productReviews_contentEmbedding_similarity(
    compare_embed: { model: "textembedding-gecko@003", text: $query }
    method: COSINE
    within: 0.75
    limit: 20
  ) {
    product {
      id
      title
      handle
    }
  }
}

# Get the orders of a customer by ID
query GetOrdersByCustomerId($customerId: String!) @auth(level: USER) {
  orders: customer(id: $customerId) {
    orders_on_customer {
      id
      customerId @check(expr: "this == auth.uid", message: "You may only see your own orders.")
      processedAt
      chargeId
      paymentIntentId
      receiptUrl
      subtotalPrice
      totalPrice
      financialStatus
      fulfillmentStatus
      orderItems_on_order {
        id
        quantity
        price
        product {
          id
          title
          handle
          productImages_on_product(orderBy: [{ displayPosition: ASC }], limit: 1) {
            url
            altText
            width
            height
          }
        }
      }
    }
  }
}

# Get a order of the logged in customer by ID
query GetOrderById($id: UUID!) @auth(level: USER) {
  order(id: $id) {
    id
    customerId
      @check(expr: "this == auth.uid", message: "Customers can only view orders they placed.")
    processedAt
    receiptUrl
    totalPrice
    financialStatus
    fulfillmentStatus
    orderItems_on_order {
      id
      quantity
      price
      product {
        id
        title
        handle
        productImages_on_product(orderBy: [{ displayPosition: ASC }], limit: 1) {
          url
          altText
          width
          height
        }
      }
    }
  }
}
